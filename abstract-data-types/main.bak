#include <stdio.h>
#include <assert.h>

#include "new.h"
#include "Object.h"
#include "Set.h"
#include "list.h"

void list_print(const struct Node * list);
void print_exists (const struct Node * l, int * d);

int main(void) {
	int data  = 0xF00DBABA + 0;
	int data1 = 0xF00DBABA + 1;
	int data2 = 0xF00DBABA + 2;
	int data3 = 0xF00DBABA + 3;

	struct Node * list = node_create(&data);
	list_append (&list, &data1);
	list_append (&list, &data);
	list_append (&list, &data2);
	list_append (&list, &data3);

	//list_append(&list, &data1);
	//list_append(&list, &data2);
	//list_append(&list, &data3);

	//int d = 0x12345678;
	//list_append (&list, &d);

	list_print(list);
	// size_t i = 0;
	// struct Node * buf = list;
	// while (buf) {
	// 	printf ("[%zu]\tADDR:%p\tDATA:%X\tNEXT:%p\n",
	// 			    i,
	// 					(void *) buf,
	// 					* (int *) buf -> data,
	// 					(void *) (buf -> next));
	// 	i++;
	// 	buf = buf -> next;
	// }

	puts ("\nEXISTS:");
	print_exists (list, &data);
	print_exists (list, &data1);
	print_exists (list, &data2);
	print_exists (list, &data3);

	puts ("\nINDICIES:");
	for (size_t i = 0; i < list_length (list); i ++) {
		const struct Node * element = list_node_at (list, i);
		assert (element);

		printf ("[%zu]\tADDR:%p\tDATA:%X\tNEXT:%p\n",
				    i,
						(void *) element,
						* (int *) element -> data,
						(void *) element -> next);
	}

	puts("\nPOPPING:");
	/*
	struct Node * pop = list_remove (list, &data);
	assert (pop);
	printf ("ADDR:%p\tDATA:%X\tNEXT:%p\n",
			    (void *) pop,
					* (int *) pop -> data,
					(void *) pop -> next);
	*/
	void * removed_data = list_remove (&list, &data);
	assert (removed_data);
	printf ("rem:%X", * (int *) removed_data);
	// printf ("len=[%zu], removed=%X", list_length (list), * (int *) removed_data);
	
	list_print (list);
	
	list_remove (&list, &data1);
	list_print (list);

	//printf ("%p\n", (void *) list_data_exists(list, &data));
	// printf ("%p\n", (void *) list_data_exists(list, &data1));
	// printf ("%p\n", (void *) list_data_exists(list, &data2));
	// printf ("%p\n", (void *) list_data_exists(list, &d));

	/*
	void * s = new(Set);
	void * a = add(s, new(Object));
	void * b = add(s, new(Object));
	void * c = new(Object);
	
	if (contains(s, a) && contains(s, b))
		puts("ok");

	if (contains(s, c))
		puts("contains?");

	if (differ(a, add(s, a)))
			puts("differ?");
	
	if (contains(s, drop(s, a)))
		puts("drop?");

	delete(drop(s, b));
	delete(drop(s, c));
	*/

	puts("\n");

	return 0;
}

void list_print(const struct Node * list) {
	puts ("\nLIST:");
	size_t i = 0;
	const struct Node * buf = list;
	while (buf) {
		printf ("[%zu]\tADDR:%p\tDATA:%X\tNEXT:%p\n",
				    i,
						(void *) buf,
						* (int *) buf -> data,
						(void *) (buf -> next));
		i++;
		buf = buf -> next;
	}
}

void print_exists (const struct Node * l, int * d) {
	printf ("%X exists?:\t%p\n",
			    * d,
					(void *) list_find (l, d));
}

